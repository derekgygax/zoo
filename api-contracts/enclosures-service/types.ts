/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/enclosure-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Enclosure Types */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EnclosureType"][];
                    };
                };
            };
        };
        put?: never;
        /** Add Enclosure Type */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EnclosureTypeBase"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/enclosure-types/identifiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Enclosure Type Identifiers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelIdentifier"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/enclosure-types/ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Enclosure Type Ids */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/enclosure-types/{enclosureTypeId}/base": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Enclosure Type Base By Id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    enclosureTypeId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EnclosureTypeBase"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/enclosures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Enclosures */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Enclosure"][];
                    };
                };
            };
        };
        put?: never;
        /** Add Enclosure */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EnclosureBase"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/enclosures/identifiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Enclosure Identifiers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ModelIdentifier"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/enclosures/{enclosureId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Enclosure */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    enclosureId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EnclosureBase"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/enclosures/{enclosureId}/base": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Enclosure Base By Id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    enclosureId: components["schemas"]["UUID"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EnclosureBase"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Enclosure: {
            id?: components["schemas"]["UUID"];
            name?: string;
            enclosureType?: components["schemas"]["EnclosureType"];
            /** Format: int32 */
            capacity?: number;
            status?: components["schemas"]["EnclosureStatus"];
            createdAt?: components["schemas"]["Instant"];
            updatedAt?: components["schemas"]["Instant"];
            modelIdentifier?: components["schemas"]["ModelIdentifier"];
        };
        EnclosureBase: {
            /**
             * Name
             * @description Name of the enclosure
             */
            name: string;
            /**
             * Enclosure Type
             * Format: selector
             * @description The type of the enclosure, such as 'jungle', 'desert', or 'aquarium'
             */
            enclosureTypeId: string;
            /**
             * Capacity
             * Format: int32
             * @description The maximum number of animals the enclosure can hold
             */
            capacity: number;
            /**
             * Status
             * @description The current status of the enclosure
             */
            status: components["schemas"]["EnclosureStatus"];
        };
        /** @enum {string} */
        EnclosureStatus: "OPEN" | "UNDER_MAINTENANCE" | "CLOSED" | "TEMPORARILY_CLOSED" | "AWAITING_CLEANING" | "BEING_RENOVATED" | "EMERGENCY_LOCKDOWN";
        EnclosureType: {
            id?: string;
            description?: string;
            createdAt?: components["schemas"]["Instant"];
            updatedAt?: components["schemas"]["Instant"];
        };
        EnclosureTypeBase: {
            /**
             * Enclosure Type
             * @description Unique identifier for the enclosure type, such as 'jungle', 'desert', or 'aquarium'
             */
            id: string;
            /**
             * Enclosure Type Description
             * @description Description of the type
             */
            description: string;
        };
        /** Format: date-time */
        Instant: string;
        ModelIdentifier: {
            /**
             * ID
             * @description Unique identifier of that instance of the Model as a string
             */
            id: string;
            /**
             * Label
             * @description A human readable label to identify that instance of the Model
             */
            label: string;
        };
        /** Format: uuid */
        UUID: string;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
